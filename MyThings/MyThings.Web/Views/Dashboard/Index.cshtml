@using MyThings.Common.Models
@using Newtonsoft.Json
@model MyThings.Web.ViewModels.HomePageViewModel

@{
    ViewBag.Title = "Index";
    ViewBag.Pageid = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="homeTitle">MyThings Dashboard</h1>

<div class="gridsterContainer">
    <div class="gridster">
        <ul>
        </ul>
    </div>
</div>


@section scripts{
<script type="text/javascript">
    
    gridsterJson = @Html.Raw(@Model.GridsterJson);

    $(window).load(function () {
        var gridster;

        @if(Model.OriginalGridsterJson == null || Model.OriginalGridsterJson == "")
        {
            @:var originalGridsterJson = [];
        }else{
            @:var originalGridsterJson = @Html.Raw(@Model.OriginalGridsterJson);
        }

        var pinnedSensors = [];
        var pinnedContainers = [];
        var pinnedGroups = [];
        var pinnedErrors = [];
        var errors = [];

        var errorCount = @ViewBag.ErrorCount.ToString();
        var warningCount = @ViewBag.WarningCount.ToString();

        var fixedTileCount = @ViewBag.FixedTileCount.ToString();
        var customTileCount = @ViewBag.CustomTileCount.ToString();
        var totalTileCount = @ViewBag.TotalTileCount.ToString();


        gridster = $(".gridster ul").gridster({
            widget_base_dimensions: [120, 120],
            max_rows: 5,
            widget_margins: [10, 10],
            shift_widgets_up: false,
            shift_larger_widgets_down: false,
            collision: {
                wait_for_mouseup: true
            }
        }).data('gridster');

        
        var highestId = 0;
        $.each(gridsterJson, function (index, value) {
            if (value.Id == 0) {
                gridster.add_widget('<li class="tile">id is 0</li>');
                //var li = $(".tile:eq("+ index +")");
            } else {
                if (value.Size_X == 0) value.Size_X = 1;
                if (value.Size_Y == 0) value.Size_Y = 1;
                gridster.add_widget('<li class="tile">id heeft waarde</li>', value.Size_X, value.Size_Y, value.Row, value.Col);
            }
           
            if(highestId < gridsterJson[index].Id) highestId = gridsterJson[index].Id;
        });

        var newPos = gridster.serialize();
        $.each(newPos, function (index, value) {
            newPos[index].Pin = gridsterJson[index].Pin;
            if(newPos[index].Pin.TileId == 0){
                highestId++;
                newPos[index].Pin.TileId = highestId;
            }
            newPos[index].Id = newPos[index].Pin.TileId;
        });
        gridsterJson = newPos;
        UpdateLayout();
    })

    function UpdateLayout(){
        $.ajax({
            method: 'POST',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            url: siteBaseUrl + "UpdateGridString",
            data: JSON.stringify({ gridsterJson: gridsterJson })
        }).done(function(){
            console.log("Layout saved.")
        }).fail(function(json) {
            if ($.isFunction(MyThings.logToUser)) {
                MyThings.logToUser("Layout could not be saved.");
            }
        });
    }
</script>
}



        @*
                //Clock Javascript
        (function() {
            initLocalClocks();
            moveSecondHands();
            setUpMinuteHands();


            //nieuw
            MaakEenGrid();

        })();

        function MaakEenGrid(){
            $(".gridster ul").gridster({
                widget_margins: [5, 5],
                widget_base_dimensions: [140, 140]
            });
        }

        //GRIDSTER DEMO JAVASCRIPT //TODO: Remodel this javascript
        var originalGridsterJson = "@Model.OriginalGridsterJson";
        var gridsterJson = @Html.Raw(@Model.GridsterJson);

        var pinnedSensors = [];
        var pinnedContainers = [];
        var pinnedGroups = [];
        var pinnedErrors = [];
        var errors = [];

        var errorCount = @ViewBag.ErrorCount.ToString();
        var warningCount = @ViewBag.WarningCount.ToString();

        var fixedTileCount = @ViewBag.FixedTileCount.ToString();
        var customTileCount = @ViewBag.CustomTileCount.ToString();
        var totalTileCount = @ViewBag.TotalTileCount.ToString();

        @foreach (Sensor sensor in Model.PinnedSensors)
        {
            @: var sensor = Sensor.loadFromJson("@JsonConvert.SerializeObject(sensor)");
            @: pinnedSensors.push(sensor);
        }

        @foreach (Container container in Model.PinnedContainers)
        {
            @: var container = new Container("@container.Id.ToString()", "@container.Name",  "@container.MACAddress",  "@container.CreationTime.ToShortDateString()", "@container.LastUpdatedTime.ToShortDateString()",
            @: "@container.ContainerType.ToString()", "@container.SensorId.ToString()", "@container.CurrentValue", "@container.History");
            @: pinnedContainers.push(container);
        }

        @foreach (Group group in Model.PinnedGroups)
        {
            @: var group = new Group("@group.Id", "@group.Name", "@group.Sensors");
            @: pinnedGroups.push(group);
        }

        @foreach (Error error in Model.PinnedErrors)
        {
            @: var error = new Error("@error.Id", "@error.ErrorCode", "@error.Type", "@error.Category", "@error.Title", "@error.Description", "@error.Advice",
            @: "@error.Time", "@error.Read", "@error.Sensor", "@error.Container");
            @: pinnedErrors.push(error);
        }

        @foreach (Error error in Model.Errors)
        {
            @: var error = new Error("@error.Id", "@error.ErrorCode", "@error.Type", "@error.Category", "@error.Title", "@error.Description", "@error.Advice",
            @: "@error.Time", "@error.Read", "@error.Sensor", "@error.Container");
            @: errors.push(error);
        }

        console.log(gridsterJson);

        console.log(pinnedSensors);
        console.log(pinnedContainers);
        console.log(pinnedGroups);
        console.log(pinnedErrors);

        console.log(errors);

        console.log(totalTileCount);
    </script>
        *@


        @*BRUNO*@


        @*<div class="mainhomepagediv">
        <div class="clockdiv maindiv">
            <div class="largesquaretile unhoverabletile">
                <div class="clock customimg">
                    <div class="hours-container">
                        <div class="hours"></div>
                    </div>
                    <div class="minutes-container">
                        <div class="minutes"></div>
                    </div>
                    <div class="seconds-container">
                        <div class="seconds"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="warningdiv maindiv">
            <a href="@Url.Action("Warning", "Dashboard")">
                <div class="largesquaretile">
                    <div class="textdiv"> Warnings</div>
                    <div class="warningvalue ciphervalue">2</div>
                    <img class="warningimg customimg" alt="warningicon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/error-icon.png" />
                </div>
            </a>
        </div>
        <div class="errordiv maindiv">
            <a href="@Url.Action("Error", "Dashboard")">
                <div class="largesquaretile">
                    <div class="textdiv">Errors</div>
                    <div class="errorvalue ciphervalue">5</div>
                    <img class="errorimg customimg" alt="erroricon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/warning-icon.png" />
                </div>
            </a>
        </div>
        logout
        <div class="logoutdiv maindiv">
            <a href="@Url.Action("About", "Dashboard")">
                <div class="largesquaretile">
                    <img class="logoutimg customimg" alt="logouticon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/door-icon.png" />
                </div>
            </a>
        </div>
        <div class="Sensormngmtdiv maindiv">
            <a href="@Url.Action("Sensors", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Sensor management</div>
                </div>
            </a>
        </div>
        <div class="containerdiv maindiv">
            <a href="@Url.Action("Containers", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Containers</div>
                </div>
            </a>
        </div>
        <div class="Invoicediv maindiv">
            <a href="@Url.Action("Invoice", "Dashboard")">
                <div class="horizontalrectangletile">
                    <div class="textdivsmallsquare">Invoice</div>
                </div>
            </a>
        </div>
        <div class="Supportdiv maindiv">
            <a href="@Url.Action("Support", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Support</div>
                </div>
            </a>
        </div>
        <div class="Mapdiv maindiv">
            <a href="@Url.Action("Map", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Geographic overview sensors</div>
                </div>
            </a>
        </div>

        @* <div class="Pinneddiv maindiv">
                <a href="@Url.Action("Map", "Dashboard")">
                    <div class="verticalrectangletile">
                        <img class="pinimg customimg" alt="logouticon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/Pin-icon.png" />
                        <div class="textdivrectangle">Groupname</div>
                    </div>
                </a>
            </div>
    </div>*@


