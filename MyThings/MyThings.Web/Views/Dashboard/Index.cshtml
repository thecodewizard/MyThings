@using MyThings.Common.Models
@using Newtonsoft.Json
@model MyThings.Web.ViewModels.HomePageViewModel

@{
    ViewBag.Title = "Dashboard";
    ViewBag.Pageid = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="homeTitle">MyThings Dashboard</h1>

@using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm", @class = "hidden" }))
{ @Html.AntiForgeryToken() }

<div class="gridsterContainer">
    <div class="gridster">
        <ul>
        </ul>
    </div>
</div>


@section scripts{
    <script type="text/javascript">

        var gridsterJson = @Html.Raw(@Model.GridsterJson);
        var gridster = null;
        var highestId = 0;
        var x = 0;
        var y = 0;


        @if (string.IsNullOrEmpty(Model.OriginalGridsterJson))
        {
            @:var originalGridsterJson = [];
        }
        else
        {
            @:var originalGridsterJson = @Html.Raw(@Model.OriginalGridsterJson);
        }

        var pinnedSensors = @Html.Raw(JsonConvert.SerializeObject(Model.PinnedSensors));
        var pinnedContainers = @Html.Raw(JsonConvert.SerializeObject(Model.PinnedContainers));
        var pinnedGroups = @Html.Raw(JsonConvert.SerializeObject(Model.PinnedGroups));
        var pinnedErrors = @Html.Raw(JsonConvert.SerializeObject(Model.PinnedErrors));
        var errors = @Html.Raw(JsonConvert.SerializeObject(Model.Errors));

        var errorCount = @ViewBag.ErrorCount.ToString();
        var warningCount = @ViewBag.WarningCount.ToString();

        var fixedTileCount = @ViewBag.FixedTileCount.ToString();
        var customTileCount = @ViewBag.CustomTileCount.ToString();
        var totalTileCount = @ViewBag.TotalTileCount.ToString();

        //sensor arrow helper:
        var sensorTileCount = 0;

        //fix link submit when dragging
        var canClick = true;

        $(window)
            .load(function() {

                //in pin: savetype en save id, savetype zegt welke tabel, saveid zegt het id van het object daj nodig et
                //Container, Sensor, Error, Group, FixedClock, FixedNavigation, FixedError

                //init grid + behavior
                gridster = $(".gridster ul")
                    .gridster({
                        widget_base_dimensions: [125, 125],
                        widget_margins: [10, 10],
                        helper: 'clone',
                        max_size_x: 2,
                        max_size_y: 2,
                        draggable: {
                            start: function(event, ui) {
                                canClick = false;
                            },
                            drag: function(event, ui) {
                                canClick : false;
                            },
                            stop: function(event, ui) {
                                updateLayout(true);

                                setTimeout(function() {
                                        canClick = true;
                                    },
                                    100);
                            }
                        },
                        resize: {
                            enabled: true,
                            start: function(event, ui, $widget) {
                                canClick = false;
                                x = $widget.data('sizex');
                                y = $widget.data('sizey');
                            },
                            resize: function(event, ui, $widget) {
                                canClick = false;
                            },
                            stop: function(event, ui, $widget) {
                                gridster.serialize();
                                var units;
                                if ((x + y) > 2) {
                                    units = 1;
                                    $widget.removeClass("largeWidget");
                                    $widget.addClass("smallWidget");
                                } else {
                                    units = 2;
                                    $widget.removeClass("smallWidget");
                                    $widget.addClass("largeWidget");
                                }
                                gridster.resize_widget($widget, units, units);
                                $widget.data('sizex', units);
                                $widget.data('sizey', units);

                                updateLayout(true);

                                setTimeout(function() {
                                        canClick = true;
                                    },
                                    100);
                            },
                            max_size: [2, 2],
                            min_size: [1, 1]
                        },
                        shift_widgets_up: false,
                        shift_larger_widgets_down: false,
                        collision: {
                            wait_for_mouseup: true
                        }
                    })
                    .data('gridster');

                //insert all current and new tiles and update the layout to the database
                var newTiles = [];
                var unhoverable = "";
                $.each(gridsterJson,
                    function(index, value) {
                        //klok is niet klikbaar dus geen hoverkleur
                        if (value.Pin.SavedTypeString === "FixedClock") unhoverable = "unhoverable ";
                        else unhoverable = "";

                        if (value.Id === 0) {
                            newTiles.push(value);
                        } else {
                            if (value.Size_X === 0) value.Size_X = 1;
                            if (value.Size_Y === 0) value.Size_Y = 1;
                            if (value.Size_X === 1)
                                gridster.add_widget('<li class="' + unhoverable + 'smallWidget tile"></li>',
                                    value.Size_X,
                                    value.Size_Y,
                                    value.Col,
                                    value.Row);
                            else
                                gridster.add_widget('<li class="' + unhoverable + ' largeWidget tile"></li>',
                                    value.Size_X,
                                    value.Size_Y,
                                    value.Col,
                                    value.Row);
                        }

                        if (highestId < gridsterJson[index].Id) highestId = gridsterJson[index].Id;
                    });
                //nieuwe tegels als laatste toevoegen
                $.each(newTiles,
                    function() {
                        gridster.add_widget('<li class="smallWidget tile"></li>');
                    });

                if (newTiles.length > 0) updateLayout(true);
                else updateLayout(false);

                //fill tiles with right contents based on gridsterJson
                $.each(gridsterJson,
                    function(index, value) {
                        //console.log(value);
                        var tile = $(".gridster ul")
                            .find("[data-row='" + value.row + "'][data-col='" + value.col + "']");
                        refreshTile(tile, value);
                    });

                //clock
                initLocalClocks();
                moveSecondHands();
                setUpMinuteHands();

                //Links
                $(".mainNav")
                    .click(function(event) {
                        if (canClick) {
                            if (!$(event.target).is("a")) event.target = event.target.parentElement;
                            var navid = $(event.target).data("navid");
                            switch (navid) {
                            case 0:
                                document.getElementById('logoutForm').submit();
                                break;
                            case 1:
                                document.location.href = "/sensormanagement";
                                break;
                            case 2:
                                document.location.href = "http://www.proximus.be/support/en/id_zwpr_support/personal/support.html";
                                break;
                            case 3:
                                document.location.href = "/";
                                break;
                            default:
                                break;

                            }
                        }
                    });


            });

        function refreshTile(tile, tileInfo) {
            var url;
            var idsToCheck = [];

            switch (tileInfo.Pin.SavedTypeString) {
                //Container, Sensor, Error, Group, FixedClock, FixedNavigation, FixedError
            case "Sensor":
                url = "get/getsensor?updatevalues=true&sensorid="; //get/getmostrecentvalue?containerId=
                break;
            case "Container":
                url = "get/getmostrecentvalue?containerId=";
                idsToCheck.push(tileInfo.Pin.SavedId);
                break;
            case "Error":
                url = "";
                break;
            default:
            case "FixedClock":
            case "FixedNavigation":
            case "Group":
            case "FixedError":
                url = "";
            }

            if (url === "") setTileValue(tile, tileInfo, null, null);
            else {
                $.ajax({
                        url: apiBaseUrl + url + tileInfo.Pin.SavedId,
                        method: "GET"
                    })
                    .done(function(json) {
                        if (json != null) {
                            var data = JSON.parse(json);

                            switch (tileInfo.Pin.SavedTypeString) {
                                //Container, Sensor, Error, Group, FixedClock, FixedNavigation, FixedError
                            case "Sensor":
                                setTileValue(tile, tileInfo, data.Containers, null);
                                break;
                            case "Container":
                                var value;
                                if (data.CurrentValue.HexValue) value = data.CurrentValue.HexValue;
                                else value = data.CurrentValue.Value;
                                setTileValue(tile, tileInfo, value, new Date(Date.parse(data.CurrentValue.Timestamp)));
                                break;
                            default:
                                break;
                            }
                        }
                    })
                    .fail(function(json) {
                        if ($.isFunction(MyThings.logToUser)) {
                            MyThings.logToUser("Item" +
                                tileInfo.Pin.SavedTypeString +
                                " " +
                                tileInfo.Pin.Id +
                                " could not be loaded.");
                            setTileValue(tile, tileInfo, null, null);
                        }
                    });
            }
        }

        function setTileValue(tile, tileInfo, value, time) {
            //div is hyperlink, cant use a due default behavior
            var innerHtml = '<div class="tileLink" data-tiletype="' +
                tileInfo.Pin.SavedTypeString +
                '" data-id="' +
                tileInfo.Pin.SavedId +
                '">';
            //console.log(tileInfo.Pin.SavedTypeString);

            switch (tileInfo.Pin.SavedTypeString) {
                //Container, Sensor, Error, Group, FixedClock, FixedNavigation, FixedError
            case "Sensor":
                sensorTileCount++;
                var werkSensor = $.grep(pinnedSensors, function(e) { return e.Id === tileInfo.Pin.SavedId; })[0];
                var show = true;
                $.each(value,
                    function(index, value) {
                        var containerValue;
                        if (value.CurrentValue.HexValue !== null) containerValue = value.CurrentValue.HexValue;
                        else containerValue = value.CurrentValue.Value;
                        if (value.ContainerType
                            .Name ===
                            "GPS")
                            containerValue = "<p class='itemValueTwoLinesSensor'>" + GPSTextFormatter(containerValue);
                        if (value.ContainerType
                            .Name ===
                            "Raw payload") containerValue = "<p class='itemValueTwoLinesSensor'>Click for Details";
                        //sensorContainerValue, SensorContainerType                            
                        if (value.ContainerType.Name !== "GPS" && value.ContainerType.Name !== "Raw payload") {
                            containerValue = "<p class='sensorContainerValue'>" + Math.round(containerValue * 10) / 10;
                        }
                        if (!show) {
                            innerHtml += "<div class='hidden sensorContainer'>";
                        } else {
                            innerHtml += "<div class='sensorContainer'>";
                            show = false;
                        }

                        switch (value.ContainerType.Name) {
                        case "Temperature":
                            containerValue += "<sup>°C</sup>";
                            break;
                        case "Humidity":
                        case "Battery level":
                            containerValue += "<sup>%</sup>";
                            break;
                        default:
                            break;
                        }

                        innerHtml += containerValue +
                            "</p><p class='SensorContainerType'>" +
                            value.ContainerType.Name +
                            "</p>" +
                            "</div>";
                    });

                innerHtml += "<p title='" +
                    werkSensor.Name +
                    "' class='itemName'>" +
                    werkSensor.Name +
                    "</p><p class='itemType'>Sensor</p>" +
                    "<img class='groupimg customimg' alt='Sensor' src='http://loradatagroep9.blob.core.windows.net/proximusimages/proximus-x-white.png' />" +
                    "<img class='next arrow' alt='Next' src='http://loradatagroep9.blob.core.windows.net/proximusimages/arrow-icon-white.png' />" +
                    "<img class='previous arrow' alt='Previous' src='http://loradatagroep9.blob.core.windows.net/proximusimages/arrow-icon-white.png' />";

                //console.log(value);
                break;
            case "Container":
                var werkContainer = $.grep(pinnedContainers, function(e) { return e.Id === tileInfo.Pin.SavedId; })[0];

                innerHtml +=
                    "<p title='" +
                    werkContainer.Name +
                    "' class='itemName'>" +
                    werkContainer.Name +
                    "</p><p class='itemType'>" +
                    werkContainer.ContainerType.Name +
                    "</p>";

                // var containerValue = ;
                //if(werkContainer.ContainerType.Name !== "Temperature") innerHtml += "TBT";
                innerHtml += containerInnerHtml(werkContainer.ContainerType.Name, value);

                break;
            case "Error":
                innerHtml += "Error";
                break;
            case "Group":
                var werkGroup = $.grep(pinnedGroups, function(e) { return e.Id === tileInfo.Pin.SavedId; })[0];
                innerHtml += '<p title=' +
                    werkGroup.Name +
                    ' class="itemName">' +
                    werkGroup.Name +
                    '</p><p class="countValue">' +
                    werkGroup.Sensors.length +
                    '</p>' +
                    '<p class="itemType">Group</p><p class="valueMeaning">Sensors</p>' +
                    '<img class="groupimg customimg" alt="Group" src="http://loradatagroep9.blob.core.windows.net/proximusimages/proximus-x-white.png" />';
                break;
            case "FixedClock":
                innerHtml +=
                    '<div class="clock clockdiv noFade customimg">' +
                    '<div class="hours-container">' +
                    '<div class="hours"></div>' +
                    '</div>' +
                    '<div class="minutes-container">' +
                    '<div class="minutes"></div>' +
                    '</div>' +
                    '<div class="seconds-container">' +
                    '<div class="seconds"></div>' +
                    '</div>' +
                    '</div>';
                break;
            case "FixedNavigation":
                var id = tileInfo.Pin.SavedId;
                innerHtml += '<a data-navid="' + id + '" class="mainNav"><img class="noFade customimg navimg" alt="';
                switch (id) {
                case 0:
                    innerHtml +=
                        'Logout" src="http://loradatagroep9.blob.core.windows.net/proximusimages/door-icon-512-white.png" /></a>';
                    break;
                case 1:
                    innerHtml +=
                        'Sensor Management" src="http://loradatagroep9.blob.core.windows.net/proximusimages/sensormanagement-icon-white.png" /></a>';
                    break;
                case 2:
                    innerHtml +=
                        'Support" src="http://loradatagroep9.blob.core.windows.net/proximusimages/support-icon-white.png" /></a>';
                    break;
                case 3:
                    innerHtml +=
                        'Invoice" src="http://loradatagroep9.blob.core.windows.net/proximusimages/invoice-icon-white.png" /></a>';
                    break;
                default:
                    //console.log(tileInfo);
                    break;

                }
                break;
            case "FixedError":
                switch (tileInfo.Pin.SavedId) {
                case 0:
                    innerHtml += '<p class="itemName">Warnings</p>' +
                        '<p class="countValue">' +
                        warningCount +
                        '</p><img class="';
                    if (warningCount !== 0) innerHtml += 'noFade ';
                    innerHtml +=
                        'warningimg customimg" alt="Warning" src="http://loradatagroep9.blob.core.windows.net/proximusimages/warning-icon.png" />';
                    break;
                case 1:
                    innerHtml += '<p class="itemName">Errors</p>' +
                        '<p class="countValue">' +
                        errorCount +
                        '</p><img class="';
                    if (errorCount !== 0) innerHtml += 'noFade ';
                    innerHtml +=
                        'errorimg customimg" alt="Error" src="http://loradatagroep9.blob.core.windows.net/proximusimages/error-icon.png" />';
                    break;
                default:
                    break;
                }
                break;
            default:
                innerHtml += "Unknown...";
                break;
            }
            if (time)
                innerHtml += '<p class="itemValueTimeStampTime">' +
                    time.toLocaleTimeString() +
                    '</p><p class="itemValueTimeStampDate">' +
                    time.toLocaleDateString() +
                    '</p>';
            innerHtml += '<span class="gs-resize-handle gs-resize-handle-both"></span></div>';
            tile.html(innerHtml);

            //remove contextmenu         
            $('li').unbind("contextmenu");
            $('li').contextmenu( function() {
                return false;
            });

            //unpin
            $(".unpin").unbind("click");
            $(".tileLink")
                .click(function(event) {

                });

            //links and right click
            $(".tileLink").unbind("mouseup");
            $(".tileLink")
                .mouseup(function(event) {
                    if (canClick) {
                        
                        if ($(event.target).hasClass("next") ||
                            $(event.target).hasClass("unpin") ||
                            $(event.target).hasClass("previous") ||
                            $(event.target).hasClass("gs-resize-handle")) return;

                        //event.target must be tileLink because of data attributes
                        while (!$(event.target).hasClass("tileLink")) event.target = event.target.parentElement;

                        var type = $(event.target).data("tiletype");
                        var id = $(event.target).data("id");
                        switch (event.which) {
                            case 1:
                            //left click:
                            switch (type) {
                            case "Container":
                                document.location.href = "/container/" + id;
                                break;
                            case "Sensor":
                                document.location.href = "/sensor/" + id;
                                break;
                            case "Group":
                                document.location.href = "/sensormanagement?selectedgroup=" + id;
                                break;
                            case "FixedError":
                                document.location.href = "/error/";
                                break;
                            }
                            break;

                        case 3:
                            //right click:
                            if (type === "Sensor" ||
                                type === "Container" ||
                                type === "Group" ||
                                type === "Error") {

                                showUnpin(type, id, event.target.parentElement);
                            }
                            break;
                            default:
                                break;
                        }
                    }

                });

            //avoid double handlers for arrow nav:
            if (pinnedSensors.length === sensorTileCount)
                $(".arrow").unbind("click");
            $(".arrow")
                .click(function(event) {
                    var isNext = true;
                    if ($(event.target).hasClass("previous")) isNext = false;
                    console.log(isNext);
                    var count = $(event.target.parentElement).find('div').length;
                    var index = $(event.target.parentElement).find('div').not(".hidden").first().index();
                    $($(event.target.parentElement).find('div')[index]).addClass("hidden");
                    if (isNext)
                        $($(event.target.parentElement).find('div')[(index + 1) % count])
                            .removeClass("hidden");
                    else
                        $($(event.target.parentElement).find('div')[(index - 1) % count])
                            .removeClass("hidden");
                });
        }

        function showUnpin(type, id, tile) {   
            $(".bottomBarWrapper").remove();
            //make bar and append to the bottom
            var bar = '<div class="bottomBarWrapper">' +
                '<p>Are you sure you want to unpin this ' + type.toLowerCase() + '?<span id="confirm">Yes</span><span id="cancel">No</span></p></div>';
            $('body').append(bar);

            $("#confirm")
                .click(function() {
                    removePin(type, id, tile);
                });            
            
            $("#cancel")
                .click(function() {
                    $(".bottomBarWrapper").remove();
                });
        }

        function removePin(type, id, tile) {
            var parameter = type.toLowerCase() + "Id";
            var dataObject = new Object();
            dataObject[parameter] = id;
                $.ajax({
                    method: 'POST',
                    url: siteBaseUrl + "Unpin" + type,
                    data: dataObject
                }).done(function() {
                    console.log("Pin Removed");                   
                    $(".bottomBarWrapper").remove();
                    gridster.remove_widget($(tile));
                    updateLayout(true);


                }).fail(function() {
                    if ($.isFunction(MyThings.logToUser)) {
                        MyThings.logToUser("Pin could not be removed.");                      
                        $(".bottomBarWrapper").remove();
                    }
                });
        }


        function updateLayout(toDatabase) {
            var newPos = gridster.serialize();
            $.each(newPos,
                function(index, value) {
                    newPos[index].Pin = gridsterJson[index].Pin;
                    if (newPos[index].Pin.TileId === 0) {
                        highestId++;
                        newPos[index].Pin.TileId = highestId;
                    }
                    newPos[index].Id = newPos[index].Pin.TileId;
                });
            gridsterJson = newPos;

            if (toDatabase) {
                $.ajax({
                        method: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        url: siteBaseUrl + "UpdateGridString",
                        data: JSON.stringify({ gridsterJson: gridsterJson })
                    })
                    .done(function() {
                        console.log("Layout saved.");
                    })
                    .fail(function(json) {
                        if ($.isFunction(MyThings.logToUser)) {
                            MyThings.logToUser("Layout could not be saved.");
                        }
                    });
            }
        }

        function containerInnerHtml(containerType, value) {
            switch (containerType) {
            case "Battery level":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "<sup>%</sup></p>" +
                    "<img class='pinimg customimg' alt='Battery' src='http://loradatagroep9.blob.core.windows.net/proximusimages/battery-icon-white.png' />";
            case "Temperature":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "<sup>°C</sup></p>" +
                    "<img class='pinimg customimg' alt='Temperature' src='http://loradatagroep9.blob.core.windows.net/proximusimages/temperature-icon-white.png' />";
            case "Humidity":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "<sup>%</sup></p>" +
                    "<img class='pinimg customimg' alt='Humidity' src='http://loradatagroep9.blob.core.windows.net/proximusimages/humidity-icon-white.png' />";
            case "GPS":
                var returnString = "<p class='itemValueTwoLines'>" + GPSTextFormatter(value);
                returnString +=
                    "</p><img class='pinimg customimg' alt='Location' src='http://loradatagroep9.blob.core.windows.net/proximusimages/location-icon-white.png' />";
                return returnString;
            case "OnOff":
            case "Button1":
            case "Push Button":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "</p>" +
                    "<img class='pinimg customimg' alt='Toggle' src='http://loradatagroep9.blob.core.windows.net/proximusimages/toggle-icon-white.png' />";;
            case "Luminance":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "</p>" +
                    "<img class='pinimg customimg' alt='Luminance' src='http://loradatagroep9.blob.core.windows.net/proximusimages/luminance-icon-white.png' />";
            case "PIR":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "</p>" +
                    "<img class='pinimg customimg' alt='PIR' src='http://loradatagroep9.blob.core.windows.net/proximusimages/eye-icon-white.png' />";
            case "Accelerometer":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "</p>" +
                    "<img class='pinimg customimg' alt='Accelerometer' src='http://loradatagroep9.blob.core.windows.net/proximusimages/accelerometer-icon-white.png' />";
            case "Simple Metering Current":
            case "Simple Metering Demand":
                return "<p class='itemValue'>" +
                    (Math.round(parseFloat(value) * 10) / 10) +
                    "</p>" +
                    "<img class='pinimg customimg' alt='Simple Metering' src='http://loradatagroep9.blob.core.windows.net/proximusimages/power-icon-white.png' />";
            default:
            case "Raw payload":
            case "Counter":
                return "<p class='itemValueClickBait'>Click for details</p>" +
                    "<img class='pinimg customimg' alt='Generic' src='http://loradatagroep9.blob.core.windows.net/proximusimages/proximus-x-white.png' />";
            }
        }

        function GPSTextFormatter(value) {
            var returnString = "";
            if (!$.isNumeric(value)) {
                returnString += (Math.round(parseFloat(value.split(" | ")[0]
                                .substring(0, value.split(" | ")[0].length - 2)
                                .replace(".", "")
                                .replace(" ", ".")) *
                            10000) /
                        10000) +
                    " N</br>" +
                    (Math.round(parseFloat(value.split(" | ")[1]
                                .substring(0, value.split(" | ")[1].length - 2)
                                .replace(".", "")
                                .replace(" ", ".")) *
                            10000) /
                        10000) +
                    " B";
            } else {
                returnString += "<p class='itemValueClickBait'>Click for details";
            }

            return returnString;
        }

    </script>
}


@*
                //Clock Javascript
        (function() {
            initLocalClocks();
            moveSecondHands();
            setUpMinuteHands();


            //nieuw
            MaakEenGrid();

        })();

        function MaakEenGrid(){
            $(".gridster ul").gridster({
                widget_margins: [5, 5],
                widget_base_dimensions: [140, 140]
            });
        }

        //GRIDSTER DEMO JAVASCRIPT //TODO: Remodel this javascript
        var originalGridsterJson = "@Model.OriginalGridsterJson";
        var gridsterJson = @Html.Raw(@Model.GridsterJson);

        var pinnedSensors = [];
        var pinnedContainers = [];
        var pinnedGroups = [];
        var pinnedErrors = [];
        var errors = [];

        var errorCount = @ViewBag.ErrorCount.ToString();
        var warningCount = @ViewBag.WarningCount.ToString();

        var fixedTileCount = @ViewBag.FixedTileCount.ToString();
        var customTileCount = @ViewBag.CustomTileCount.ToString();
        var totalTileCount = @ViewBag.TotalTileCount.ToString();

        @foreach (Sensor sensor in Model.PinnedSensors)
        {
            @: var sensor = Sensor.loadFromJson("@JsonConvert.SerializeObject(sensor)");
            @: pinnedSensors.push(sensor);
        }

        @foreach (Container container in Model.PinnedContainers)
        {
            @: var container = new Container("@container.Id.ToString()", "@container.Name",  "@container.MACAddress",  "@container.CreationTime.ToShortDateString()", "@container.LastUpdatedTime.ToShortDateString()",
            @: "@container.ContainerType.ToString()", "@container.SensorId.ToString()", "@container.CurrentValue", "@container.History");
            @: pinnedContainers.push(container);
        }

        @foreach (Group group in Model.PinnedGroups)
        {
            @: var group = new Group("@group.Id", "@group.Name", "@group.Sensors");
            @: pinnedGroups.push(group);
        }

        @foreach (Error error in Model.PinnedErrors)
        {
            @: var error = new Error("@error.Id", "@error.ErrorCode", "@error.Type", "@error.Category", "@error.Title", "@error.Description", "@error.Advice",
            @: "@error.Time", "@error.Read", "@error.Sensor", "@error.Container");
            @: pinnedErrors.push(error);
        }

        @foreach (Error error in Model.Errors)
        {
            @: var error = new Error("@error.Id", "@error.ErrorCode", "@error.Type", "@error.Category", "@error.Title", "@error.Description", "@error.Advice",
            @: "@error.Time", "@error.Read", "@error.Sensor", "@error.Container");
            @: errors.push(error);
        }

        console.log(gridsterJson);

        console.log(pinnedSensors);
        console.log(pinnedContainers);
        console.log(pinnedGroups);
        console.log(pinnedErrors);

        console.log(errors);

        console.log(totalTileCount);
    </script>
        *@


        @*BRUNO*@


        @*<div class="mainhomepagediv">
        <div class="clockdiv maindiv">
            <div class="largesquaretile unhoverabletile">
                <div class="clock customimg">
                    <div class="hours-container">
                        <div class="hours"></div>
                    </div>
                    <div class="minutes-container">
                        <div class="minutes"></div>
                    </div>
                    <div class="seconds-container">
                        <div class="seconds"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="warningdiv maindiv">
            <a href="@Url.Action("Warning", "Dashboard")">
                <div class="largesquaretile">
                    <div class="textdiv"> Warnings</div>
                    <div class="warningvalue ciphervalue">2</div>
                    <img class="warningimg customimg" alt="warningicon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/error-icon.png" />
                </div>
            </a>
        </div>
        <div class="errordiv maindiv">
            <a href="@Url.Action("Error", "Dashboard")">
                <div class="largesquaretile">
                    <div class="textdiv">Errors</div>
                    <div class="errorvalue ciphervalue">5</div>
                    <img class="errorimg customimg" alt="erroricon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/warning-icon.png" />
                </div>
            </a>
        </div>
        logout
        <div class="logoutdiv maindiv">
            <a href="@Url.Action("About", "Dashboard")">
                <div class="largesquaretile">
                    <img class="logoutimg customimg" alt="logouticon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/door-icon.png" />
                </div>
            </a>
        </div>
        <div class="Sensormngmtdiv maindiv">
            <a href="@Url.Action("Sensors", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Sensor management</div>
                </div>
            </a>
        </div>
        <div class="containerdiv maindiv">
            <a href="@Url.Action("Containers", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Containers</div>
                </div>
            </a>
        </div>
        <div class="Invoicediv maindiv">
            <a href="@Url.Action("Invoice", "Dashboard")">
                <div class="horizontalrectangletile">
                    <div class="textdivsmallsquare">Invoice</div>
                </div>
            </a>
        </div>
        <div class="Supportdiv maindiv">
            <a href="@Url.Action("Support", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Support</div>
                </div>
            </a>
        </div>
        <div class="Mapdiv maindiv">
            <a href="@Url.Action("Map", "Dashboard")">
                <div class="smallsquaretile">
                    <div class="textdivsmallsquare">Geographic overview sensors</div>
                </div>
            </a>
        </div>

        @* <div class="Pinneddiv maindiv">
                <a href="@Url.Action("Map", "Dashboard")">
                    <div class="verticalrectangletile">
                        <img class="pinimg customimg" alt="logouticon" src="http://loradatagroep9.blob.core.windows.net/proximusimages/Pin-icon.png" />
                        <div class="textdivrectangle">Groupname</div>
                    </div>
                </a>
            </div>
    </div>*@


