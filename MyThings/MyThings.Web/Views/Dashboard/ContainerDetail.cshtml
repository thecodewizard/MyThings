@using MyThings.Common.Models
@model MyThings.Common.Models.Container

@{
    ViewBag.Title = "Container";
    ViewBag.Pageid = "containerdetail";
}

<section class="containerdetail">
    <ul>
        <li class="breadcrumbs">
            @Html.ActionLink("Home", "Index", "Dashboard") >
            @Html.ActionLink("Sensor management", "Sensormanagement", "Dashboard") >
            @Html.ActionLink("Sensor " + (String) ViewBag.ParentSensor.Name, "SensorDetail", "Dashboard", new {Id = (int) ViewBag.ParentSensor.Id}, null) >
            @Html.ActionLink(Model.ContainerType.Name + " Container", "ContainerDetail", "Dashboard", new {Id = Model.Id}, null)
        </li>
    </ul>

    <h1>@Model.ContainerType.Name Container</h1>

    <div class  ="blocksholder">
        <article class="detailblock square">
            <div id="containerimg">
                <img class="tileimg" alt="Temperature" src="http://loradatagroep9.blob.core.windows.net/proximusimages/temperature-icon-white.png" />
            </div>
            <div class="title">
                <p>@Model.ContainerType.Name</p>
            </div>
            <div class="value" id="recentValueTile"></div>
        </article>
        <article class="detailblock rectangle">
            <div class="title">
                <p>History & Trendanalysis</p>
            </div>
            <div id="chart">
                <svg width="600" height="300" style="position: absolute; top: 0; left: 0;"></svg>
            </div>
        </article>
        <article class="detailblock rectangle">
            <div class="title">
                <p>Set Threshold Value</p>
            </div>
            <div id="thresholdCarousel" class="carousel" data-interval="false" data-ride="carousel">
                <!-- Indicators -->
                <ol class="carousel-indicators">
                    <li data-target="#thresholdCarousel" data-slide-to="0" class="active"></li>
                    <li data-target="#thresholdCarousel" data-slide-to="1"></li>
                    <li data-target="#thresholdCarousel" data-slide-to="2"></li>
                </ol>

                <!-- Wrapper for slides -->
                <div class="carousel-inner" role="listbox" data-interval="false">
                    <div class="item active">
                        <div>
                            <div>
                                <h3 class="blue">Minimum</h3>
                                <div class="adjustable">
                                    <div id="minTempValue" class="value left">
                                        <div>23</div>
                                        <span class="sup">°C</span>
                                    </div>
                                    <div class="arrows">
                                        <span class="glyphicon glyphicon-chevron-up blue"></span>
                                        <span class="glyphicon glyphicon-chevron-down blue"></span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <h3 class="purple">Maximum</h3>
                                <div class="adjustable">
                                    <div id="maxTempValue" class="value right">
                                        <div>23</div>
                                        <span class="sup">°C</span>
                                    </div>
                                    <div class="arrows">
                                        <span class="glyphicon glyphicon-chevron-up purple"></span>
                                        <span class="glyphicon glyphicon-chevron-down purple"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div>
                            <div>
                                <h3 class="blue">Match Value</h3>
                                <div class="adjustable">
                                    <div id="exactValue" class="value left">
                                        <div>23</div>
                                        <span class="sup">°C</span>
                                    </div>
                                    <div class="arrows">
                                        <span class="glyphicon glyphicon-chevron-up blue"></span>
                                        <span class="glyphicon glyphicon-chevron-down blue"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="item">
                        <div>
                            <div>
                                <h3 class="blue">Hours</h3>
                                <div class="adjustable">
                                    <div id="hourValue" class="value left">
                                        @if (Model.Threshold == null)
                                        {
                                            <div>24</div>
                                        } else
                                        {
                                            <div>@Model.Threshold.MinUpdateInterval.Hours.ToString()</div>
                                        }
                                        <div style="font-size: 0.6em; align-self: flex-end;">h</div>
                                    </div>
                                    <div class="arrows">
                                        <span class="glyphicon glyphicon-chevron-up blue"></span>
                                        <span class="glyphicon glyphicon-chevron-down blue"></span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <h3 class="purple">Minutes</h3>
                                <div class="adjustable">
                                    <div id="minuteValue" class="value right">
                                        @if (Model.Threshold == null)
                                        {
                                            <div>0</div>
                                        } else
                                        {
                                            <div>@Model.Threshold.MinUpdateInterval.Minutes.ToString()</div>
                                        }
                                        <div style="font-size: 0.6em; align-self: flex-end;">m</div>
                                    </div>
                                    <div class="arrows">
                                        <span class="glyphicon glyphicon-chevron-up purple"></span>
                                        <span class="glyphicon glyphicon-chevron-down purple"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Left and right controls -->
                <a class="left carousel-control" href="#thresholdCarousel" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#thresholdCarousel" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>

            </div>
        </article>
        <article class="detailblock square">
            <div class="title">
                <p>Other Containers</p>
            </div>
            <ul class="containerlist">
                @foreach (Container container in ViewBag.ParentSensor.Containers)
                {
                    <li id="c_@container.Id">
                        <img alt="Temperature" src="http://loradatagroep9.blob.core.windows.net/proximusimages/temperature-icon-white.png"/>
                        <p>Temperature</p>
                    </li>
                }
            </ul>
        </article>
    </div>
</section>

@section scripts {
    <script>
        parseDate = d3.time.format('%Y-%m-%d').parse;

        $(window).load(function () {
            //Format the data from the model
            $("#containerimg").html(GetImageSourceForContainer("@Model.ContainerType.Name", true));
            @if (Model.Threshold != null)
            {
               @: $("#minTempValue").html(GetValueForContainer("@Model.ContainerType.Name", @Model.Threshold.MinValue, true));
                           @: $("#maxTempValue").html(GetValueForContainer("@Model.ContainerType.Name", @Model.Threshold.MaxValue, true));
                           @: $("#exactValue").html(GetValueForContainer("@Model.ContainerType.Name", @Model.Threshold.MatchValue, true));
                        }

            @foreach (Container container in ViewBag.ParentSensor.Containers)
            {
                @: $("#c_@container.Id").html(GetImageSourceForContainer("@container.ContainerType.Name", false) + "<p>@container.ContainerType.Name</p>");
                        }

            //Fetch the new data from the server and show it
            getRecentData(@Model.Id,
                function(value) {
                    $("#recentValueTile").html(GetValueForContainer("@Model.ContainerType.Name", value, false));
                    $("#containerimg").html(GetImageSourceForContainer("@Model.ContainerType.Name", true));
                    //$("#hourValue").html("");
                    //$("#minuteValue").html("");
                });

            getHistory(@Model.Id,
                8760,
                function(data) {
                    if (data.History != null) {
                        var json = JSON.stringify(data.History);
                        var linedata = makeLineData(data.History);

                        var markers = getMarkers();

                        makeChart(linedata, markers);
                    }
                });
        });

        function getHistory(containerId, historyHours, historyLoaded) {
            $.ajax({
                url: apiBaseUrl + "/get/gethistory?containerid=" + containerId + "&historyTimeInHours=" + historyHours,
                method: "GET"
            })
                .done(function(json) {
                    if (json != null) {
                        var data = JSON.parse(json);
                        if ($.isFunction(historyLoaded)) {
                            historyLoaded(data);
                        }
                    }
                })
                .fail(function() {
                    if ($.isFunction(MyThings.logToUser)) {
                        MyThings.logToUser("Item " + containerId +
                            " could not be loaded.");
                    }
                });
        }

        function getRecentData(containerId, recentDataLoaded) {
            $.ajax({
                url: apiBaseUrl + "/get/getmostrecentvalue?containerid=" + containerId,
                method: "GET"
            })
                .done(function(json) {
                    if (json != null) {
                        var data = JSON.parse(json);
                        var value;
                        if (data.CurrentValue.HexValue) value = data.CurrentValue.HexValue;
                        else value = data.CurrentValue.Value;

                        if ($.isFunction(recentDataLoaded)) {
                            recentDataLoaded(value);
                        }
                    }
                })
                .fail(function() {
                    if ($.isFunction(MyThings.logToUser)) {
                        MyThings.logToUser("Item " + containerId + " could not be loaded.");
                    }
                });
        }



        function makeLineData(json) {

            var data = json.map(function (d) {
                console.log(d);
                return {
                    date: parseDate(d.Timestamp),
                    pct50: d.Value / 1000
                };
            });

            return data;
        }

        function getMarkers() {
            var markerData = [
                {
                    "date": "2014-08-06",
                    "type": "History",
                    "version": ""
                },
                {
                    "date": "2014-08-20",
                    "type": "History",
                    "version": ""
                },
                {
                    "date": "2014-08-27",
                    "type": "Current",
                    "version": "Value"
                },
                {
                    "date": "2014-09-03",
                    "type": "History",
                    "version": ""
                }
            ];

            var markers = markerData.map(function (marker) {
                return {
                    date: parseDate(marker.date),
                    type: marker.type,
                    version: marker.version
                };
            });

            return markers;
        }

        function GetValueForContainer(containerTypeName, value, checkNumeric) {
            if (checkNumeric && !$.isNumeric(value)) return "<div>N/A</div>";

            switch (containerTypeName) {
                case "Battery level":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div><span class='sup'>%</span>";
                case "Temperature":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div><span class='sup'>°C</span>";
                case "Humidity":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div><span class='sup'>%</span>";
                case "GPS":
                    var innerHtml = "";
                    if (!$.isNumeric(value)) {
                        innerHtml += "<div>" +
                            (Math.round(parseFloat(value.split(" | ")[0]
                                        .substring(0, value.split(" | ")[0].length - 2)
                                        .replace(".", "")
                                        .replace(" ", ".")) *
                                    10000) /
                                10000) +
                            " N</br>" +
                            (Math.round(parseFloat(value.split(" | ")[1]
                                        .substring(0, value.split(" | ")[1].length - 2)
                                        .replace(".", "")
                                        .replace(" ", ".")) *
                                    10000) /
                                10000) +
                            " B";
                    } else {
                        innerHtml += "<div>No Details available.</div>";
                    }
                    innerHtml += "</div>";
                    return innerHtml;
                case "OnOff":
                case "Button1":
                case "Push Button":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div>";
                case "Luminance":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div>";
                case "PIR":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div>";
                case "Accelerometer":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div>";
                case "Simple Metering Current":
                case "Simple Metering Demand":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div>";
                default:
                case "Raw payload":
                case "Counter":
                    return "<div>" + (Math.round(parseFloat(value) * 10) / 10) + "</div>";
            }
        }

        function GetImageSourceForContainer(containerTypeName, hasClass) {
            var c = "";
            if (hasClass === true) {
                c = "tileimg";
            }

            switch (containerTypeName) {
                case "Battery level":
                    return "<img class='"+ c +"' alt='Battery' src='http://loradatagroep9.blob.core.windows.net/proximusimages/battery-icon-white.png' />";
                case "Temperature":
                    return "<img class='"+ c +"' alt='Temperature' src='http://loradatagroep9.blob.core.windows.net/proximusimages/temperature-icon-white.png' />";
                case "Humidity":
                    return "<img class='"+ c +"' alt='Humidity' src='http://loradatagroep9.blob.core.windows.net/proximusimages/humidity-icon-white.png' />";
                case "GPS":
                    return "</p><img class='"+ c +"' alt='Location' src='http://loradatagroep9.blob.core.windows.net/proximusimages/location-icon-white.png' />";
                case "OnOff":
                case "Button1":
                case "Push Button":
                    return "<img class='"+ c +"' alt='Toggle' src='http://loradatagroep9.blob.core.windows.net/proximusimages/toggle-icon-white.png' />";
                case "Luminance":
                    return "<img class='"+ c +"' alt='Luminance' src='http://loradatagroep9.blob.core.windows.net/proximusimages/luminance-icon-white.png' />";
                case "PIR":
                    return "<img class='"+ c +"' alt='PIR' src='http://loradatagroep9.blob.core.windows.net/proximusimages/eye-icon-white.png' />";
                case "Accelerometer":
                    return "<img class='"+ c +"' alt='Accelerometer' src='http://loradatagroep9.blob.core.windows.net/proximusimages/accelerometer-icon-white.png' />";
                case "Simple Metering Current":
                case "Simple Metering Demand":
                    return "<img class='"+ c +"' alt='Simple Metering' src='http://loradatagroep9.blob.core.windows.net/proximusimages/power-icon-white.png' />";
                default:
                case "Raw payload":
                case "Counter":
                    return "<img class='"+ c +"' alt='Generic' src='http://loradatagroep9.blob.core.windows.net/proximusimages/proximus-x-white.png' />";
            }
        }




        //The functions for the graph
        function addAxesAndLegend(svg, xAxis, yAxis, margin, chartWidth, chartHeight) {
            // clipping to make sure nothing appears behind legend
            var axes = svg.append('g')
              .attr('clip-path', 'url(#axes-clip)');

            axes.append('g')
              .attr('class', 'x axis')
              .attr('transform', 'translate(0,' + chartHeight + ')')
              .call(xAxis);

            axes.append('g')
              .attr('class', 'y axis')
              .call(yAxis)
              .append('text')
                .attr('transform', 'rotate(-90)')
                .attr('y', 6)
                .attr('dy', '.71em')
                .style('text-anchor', 'end')
                .text('Time (s)');
        }

        function drawPaths(svg, data, x, y) {
            var highestValue = "";
            for (var i = 0; i < data.count; i++) {

            }

            var medianLine = d3.svg.line()
              .interpolate('basis')
              .x(function (d) { return x(d.date); })
              .y(function (d) { return y(d.pct50); });

            var lowerInnerArea = d3.svg.area()
              .interpolate('basis')
              .x(function (d) { return x(d.date) || 1; })
              .y0(function (d) { return y(d.pct50); })
              .y1(10000);

            svg.datum(data);

            svg.append('path')
              .attr('class', 'area lower inner')
              .attr('d', lowerInnerArea)
              .attr('clip-path', 'url(#rect-clip)');

            svg.append('path')
              .attr('class', 'median-line')
              .attr('d', medianLine)
              .attr('clip-path', 'url(#rect-clip)');
        }

        function addMarker(marker, svg, chartHeight, x) {
            var radius = 32,
                xPos = x(marker.date) - radius - 3,
                yPosStart = chartHeight - radius - 3,
                yPosEnd = (marker.type === 'History' ? 80 : 0) + radius - 3;

            var markerG = svg.append('g')
              .attr('class', 'marker ' + marker.type.toLowerCase())
              .attr('transform', 'translate(' + xPos + ', ' + yPosStart + ')')
              .attr('opacity', 0);

            markerG.transition()
              .duration(1000)
              .attr('transform', 'translate(' + xPos + ', ' + yPosEnd + ')')
              .attr('opacity', 1);

            markerG.append('path')
              .attr('d', 'M' + radius + ',' + (chartHeight - yPosStart) + 'L' + radius + ',' + (chartHeight - yPosStart))
              .transition()
                .duration(1000)
                .attr('d', 'M' + radius + ',' + (chartHeight - yPosEnd) + 'L' + radius + ',' + (radius * 2));

            markerG.append('circle')
              .attr('class', 'marker-bg')
              .attr('cx', radius)
              .attr('cy', radius)
              .attr('r', radius);

            markerG.append('text')
              .attr('x', radius)
              .attr('y', radius * 0.9)
              .text(marker.type);

            markerG.append('text')
              .attr('x', radius)
              .attr('y', radius * 1.5)
              .text(marker.version);
        }

        function startTransitions(svg, chartWidth, chartHeight, rectClip, markers, x) {
            rectClip.transition()
              .duration(1000 * markers.length)
              .attr('width', chartWidth);

            markers.forEach(function (marker, i) {
                setTimeout(function () {
                    addMarker(marker, svg, chartHeight, x);
                }, 1000 + 500 * i);
            });
        }

        function makeChart(data, markers) {
            var svgWidth = 600,
                svgHeight = 300,
                margin = { top: 20, right: 20, bottom: 40, left: 40 },
                chartWidth = svgWidth - margin.left - margin.right,
                chartHeight = svgHeight - margin.top - margin.bottom;

            var x = d3.time.scale().range([0, chartWidth])
                      .domain(d3.extent(data, function (d) { return d.date; })),
                y = d3.scale.linear().range([chartHeight, 0])
                      .domain([0, d3.max(data, function (d) { return d.pct95; })]);

            var xAxis = d3.svg.axis().scale(x).orient('bottom')
                          .innerTickSize(-chartHeight).outerTickSize(0).tickPadding(10),
                yAxis = d3.svg.axis().scale(y).orient('left')
                          .innerTickSize(-chartWidth).outerTickSize(0).tickPadding(10);

            var svg = d3.select('#chart').append('svg')
              .attr('width', svgWidth)
              .attr('height', svgHeight)
              .append('g')
                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

            // clipping to start chart hidden and slide it in later
            var rectClip = svg.append('clipPath')
              .attr('id', 'rect-clip')
              .append('rect')
                .attr('width', 0)
                .attr('height', chartHeight);

            addAxesAndLegend(svg, xAxis, yAxis, margin, chartWidth, chartHeight);
            drawPaths(svg, data, x, y);
            startTransitions(svg, chartWidth, chartHeight, rectClip, markers, x);
        }

    </script>
}